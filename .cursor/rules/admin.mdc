---
alwaysApply: true
---

# 万花电商管理后台 - Cursor Rules

## 项目概述
这是一个基于 React + TypeScript + Vite + Ant Design + Tailwind CSS 的电商管理后台项目。

## 技术栈
- **前端框架**: React 19 + TypeScript
- **构建工具**: Vite
- **UI组件库**: Ant Design
- **样式方案**: Tailwind CSS (已完全替换CSS文件)
- **状态管理**: zustand
- **路由**: React Router
- **API客户端**: 基于 backend-api 包

## 代码规范

### 组件开发
- 使用函数式组件 + TypeScript
- 组件文件使用 `.tsx` 扩展名
- 组件名使用 PascalCase
- 优先使用 Ant Design 组件，避免自定义实现
- 使用 Tailwind CSS 进行样式设计，不再使用 CSS 文件

### 样式规范
- **禁止使用**: CSS 文件、Less 文件、SCSS 文件
- **必须使用**: Tailwind CSS 类名
- 响应式设计使用 Tailwind 的断点前缀 (sm:, md:, lg:, xl:)
- 颜色方案使用 Tailwind 的默认调色板

### 国际化
- **已移除国际化功能**
- 所有文本直接使用中文
- 不要使用 useLocale 或任何国际化相关代码

### API 调用
- 使用 `@/api` 中配置好的 API 客户端
- 认证 token 会自动添加到请求头
- 错误处理使用统一的错误处理逻辑

### 文件结构
```
src/
├── api/                 # API 客户端配置
├── components/          # 可复用组件
├── pages/              # 页面组件
├── utils/              # 工具函数
├── hooks/              # 自定义 hooks
└── types/              # TypeScript 类型定义
└── store/              # 状态管理
```

## 现有组件和工具

### 认证相关
- `@/utils/auth.ts` - 认证状态管理工具
- `@/utils/checkLogin.tsx` - 登录状态检查
- `@/api` - API 客户端，包含 auth 模块

### 存储相关
- `@/utils/useStorage` - localStorage 管理 hook

### 页面组件
- `@/pages/login/` - 登录页面（已使用 Tailwind CSS）

## 开发约定

### 命名规范
- 文件名使用 kebab-case
- 组件名使用 PascalCase
- 变量和函数使用 camelCase
- 常量使用 UPPER_SNAKE_CASE

### 导入顺序
1. React 相关导入
2. 第三方库导入
3. 内部组件导入
4. 工具函数导入
5. 类型导入

### 错误处理
- 使用 Ant Design 的 message 组件显示提示（已在 globalProperties.ts 中注册）
- API 错误统一在拦截器中处理
- 表单验证使用 Ant Design 的 Form 组件 （已在 components/ProForm 中封装）

## 禁止事项
- ❌ 不要创建 CSS/Less/SCSS 文件
- ❌ 不要使用国际化相关代码
- ❌ 不要重复实现已有的 Ant Design 组件
- ❌ 不要使用内联样式
- ❌ 不要使用 class 属性，使用 className
- ❌ 不要直接使用 Ant Design 中的 Form，Table，Modal，message 组件

## 推荐做法
- ✅ 优先使用 components，hooks， globalProperties 中封装好的组件
- ✅ 使用 Tailwind CSS 进行样式设计
- ✅ 使用 TypeScript 严格类型检查
- ✅ 组件保持单一职责
- ✅ 使用现有的工具函数和 hooks
- ✅ 遵循现有的文件结构约定
- ✅ 所有的 FormModal 都应该封装为 hooks 方便在其他地方复用

## 示例代码

### 组件定义
```tsx
import { ProForm, useSchemas } from '@/components/ProForm'; 

interface ComponentProps {
  title: string;
  onSubmit: (values: any) => void;
}

const MyComponent = ({ title, onSubmit }: ComponentProps) => {
  const schemas = useSchemas([
    {
      field: 'name',
      label: '名称',
      component: 'Input',
    }
  ])
  return (
    <div className="p-4 bg-white rounded-lg shadow">
      <h2 className="text-xl font-semibold mb-4">{title}</h2>
      <ProForm schemas={schemas} onFinish={onSubmit}></ProForm>
    </div>
  );
};

export default MyComponent;
```

### API 调用
```tsx
import { API } from '@/api';

const handleSubmit = async (values: any) => {
  try {
    const response = await API.auth.authControllerLogin(values);
    $message.success('操作成功');
  } catch (error) {
    $message.error('操作失败');
  }
};
```

记住：始终优先使用现有的组件和工具，避免重复实现！
# 万花电商管理后台 - Cursor Rules

## 项目概述
这是一个基于 React + TypeScript + Vite + Ant Design + Tailwind CSS 的电商管理后台项目。

## 技术栈
- **前端框架**: React 19 + TypeScript
- **构建工具**: Vite
- **UI组件库**: Ant Design
- **样式方案**: Tailwind CSS (已完全替换CSS文件)
- **状态管理**: zustand
- **路由**: React Router
- **API客户端**: 基于 backend-api 包

## 代码规范

### 组件开发
- 使用函数式组件 + TypeScript
- 组件文件使用 `.tsx` 扩展名
- 组件名使用 PascalCase
- 优先使用 Ant Design 组件，避免自定义实现
- 使用 Tailwind CSS 进行样式设计，不再使用 CSS 文件

### 样式规范
- **禁止使用**: CSS 文件、Less 文件、SCSS 文件
- **必须使用**: Tailwind CSS 类名
- 响应式设计使用 Tailwind 的断点前缀 (sm:, md:, lg:, xl:)
- 颜色方案使用 Tailwind 的默认调色板

### 国际化
- **已移除国际化功能**
- 所有文本直接使用中文
- 不要使用 useLocale 或任何国际化相关代码

### API 调用
- 使用 `@/api` 中配置好的 API 客户端
- 认证 token 会自动添加到请求头
- 错误处理使用统一的错误处理逻辑

### 文件结构
```
src/
├── api/                 # API 客户端配置
├── components/          # 可复用组件
├── pages/              # 页面组件
├── utils/              # 工具函数
├── hooks/              # 自定义 hooks
└── types/              # TypeScript 类型定义
└── store/              # 状态管理
```

## 现有组件和工具

### 认证相关
- `@/utils/auth.ts` - 认证状态管理工具
- `@/utils/checkLogin.tsx` - 登录状态检查
- `@/api` - API 客户端，包含 auth 模块

### 存储相关
- `@/utils/useStorage` - localStorage 管理 hook

### 页面组件
- `@/pages/login/` - 登录页面（已使用 Tailwind CSS）

## 开发约定

### 命名规范
- 文件名使用 kebab-case
- 组件名使用 PascalCase
- 变量和函数使用 camelCase
- 常量使用 UPPER_SNAKE_CASE

### 导入顺序
1. React 相关导入
2. 第三方库导入
3. 内部组件导入
4. 工具函数导入
5. 类型导入

### 错误处理
- 使用 Ant Design 的 message 组件显示提示（已在 globalProperties.ts 中注册）
- API 错误统一在拦截器中处理
- 表单验证使用 Ant Design 的 Form 组件 （已在 components/ProForm 中封装）

## 禁止事项
- ❌ 不要创建 CSS/Less/SCSS 文件
- ❌ 不要使用国际化相关代码
- ❌ 不要重复实现已有的 Ant Design 组件
- ❌ 不要使用内联样式
- ❌ 不要使用 class 属性，使用 className

## 推荐做法
- ✅ 优先使用 components 目录下封装好的组件，不满足需求的情况下再去使用 Ant Design 组件
- ✅ 使用 Tailwind CSS 进行样式设计
- ✅ 使用 TypeScript 严格类型检查
- ✅ 组件保持单一职责
- ✅ 使用现有的工具函数和 hooks
- ✅ 遵循现有的文件结构约定

## 示例代码

### 组件定义
```tsx
import { ProForm, useSchemas } from '@/components/ProForm'; 

interface ComponentProps {
  title: string;
  onSubmit: (values: any) => void;
}

const MyComponent = ({ title, onSubmit }: ComponentProps) => {
  const schemas = useSchemas([
    {
      field: 'name',
      label: '名称',
      component: 'Input',
    }
  ])
  return (
    <div className="p-4 bg-white rounded-lg shadow">
      <h2 className="text-xl font-semibold mb-4">{title}</h2>
      <ProForm schemas={schemas} onFinish={onSubmit}></ProForm>
    </div>
  );
};

export default MyComponent;
```

### API 调用
```tsx
import { API } from '@/api';

const handleSubmit = async (values: any) => {
  try {
    const response = await API.auth.authControllerLogin(values);
    $message.success('操作成功');
  } catch (error) {
    $message.error('操作失败');
  }
};
```

记住：始终优先使用现有的组件和工具，避免重复实现！
