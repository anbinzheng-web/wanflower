---
alwaysApply: true
---

# 万花电商管理后台 - Cursor Rules

## 项目概述

基于 **React 19 + TypeScript + Vite + Ant Design + Tailwind CSS** 的电商管理后台项目。

## 技术栈

* **前端框架**: React 19 + TypeScript
* **构建工具**: Vite
* **UI组件库**: Ant Design（仅在组件库不足时自定义封装）
* **样式方案**: Tailwind CSS（完全替代 CSS/Less/SCSS）
* **状态管理**: zustand
* **路由**: React Router
* **API 客户端**: backend-api 包封装（位于 `@/api`）

---

## 文件结构

```
src/
├── api/          # API 客户端配置
├── components/   # 可复用组件（优先使用）
├── pages/        # 页面组件
├── utils/        # 工具函数
├── hooks/        # 自定义 hooks
├── store/        # 状态管理
└── types/        # TypeScript 类型定义
└── globalProperties.ts        # 全局挂载方法，一些非常方便的方法，例如 dayjs 等。公共方法优先从这里面找
```

---

## 开发规范

### 组件开发

* 使用函数式组件 + TypeScript
* 文件扩展名统一为 `.tsx`
* **命名规则**：组件 (PascalCase)，文件 (kebab-case)，变量/函数 (camelCase)，常量 (UPPER_SNAKE_CASE)
* 优先使用 **封装好的组件** → 其次使用 Ant Design → 最后再自定义
* 样式必须使用 **Tailwind CSS 类名**（响应式设计用 sm:/md:/lg:/xl: 前缀）
* 不允许使用 `style` 内联样式或 `class` 属性，必须用 `className`

### API 调用

* 通过 `@/api` 客户端调用（已内置 token 注入 & 错误拦截器）
* 成功与失败提示统一使用 `$message`（已在 `globalProperties.ts` 注册）

### 错误处理 & 表单

* 表单统一使用封装好的 `ProForm`（不要直接使用 antd Form）
* Modal、Table 等也需优先使用已封装版本

---

## 禁止事项

* ❌ 不允许创建 **CSS/Less/SCSS 文件**
* ❌ 不允许使用 **国际化 / useLocale**（所有文本直接写中文）
* ❌ 不允许重复实现已有的组件
* ❌ 不允许直接使用 Ant Design 原生 Form、Table、Modal、message 组件

---

## 推荐实践

* ✅ 组件保持单一职责，逻辑复杂时抽取 hooks
* ✅ 使用 Tailwind + Ant Design 封装好的组件，保证统一风格
* ✅ 使用 TypeScript 严格类型检查
* ✅ 遵循文件结构，避免随意建目录
* ✅ 表单弹窗建议封装为 hooks，便于复用

---

## 示例代码

### 组件定义

```tsx
import { ProForm, useSchemas } from '@/components/ProForm'; 

interface ComponentProps {
  title: string;
  onSubmit: (values: any) => void;
}

const MyComponent = ({ title, onSubmit }: ComponentProps) => {
  const schemas = useSchemas([
    { field: 'name', label: '名称', component: 'Input' }
  ]);
  
  return (
    <div className="p-4 bg-white rounded-lg shadow">
      <h2 className="text-xl font-semibold mb-4">{title}</h2>
      <ProForm schemas={schemas} onFinish={onSubmit} />
    </div>
  );
};

export default MyComponent;
```

### Table 组件

```tsx
import { ProTable, defineColumns } from '@/components/ProTable'; 
import { EditOutlined, DeleteOutlined, KeyOutlined } from '@ant-design/icons';

const MyComponent = () => {
  const columns = [
    {
      title: '标题',
      dataIndex: 'title'
    },
    {
      title: '文章内容',
      dataIndex: 'content'
    }
  ]

  const actions = [
    {
      name: 'edit',
      icon: <EditOutlined />,
      text: '编辑'
    },
    {
      name: 'delete',
      icon: <DeleteOutlined />,
      text: '删除',
      danger: true
    },
    {
      name: 'resetPassword',
      icon: <KeyOutlined />,
      text: '重置密码'
    }
  ]

  const handleAction = async (name, record) => {
    switch (name) {
      case 'edit':
        // ... handle edit
        break;
      case 'delete':
        // ... handle delete
        break;
      case 'resetPassword':
        // ... handle resetPassword
        break;
      default:
        console.warn('未知操作:', name, record);
    }
  }
  
  return (
    <ProTable columns={columns} actions={actions} handleAction={handleAction}></ProTable>
  );
};

export default MyComponent;
```


### API 调用

```tsx
import { API } from '@/api';

const handleSubmit = async (values: any) => {
  try {
    await API.auth.authControllerLogin(values);
    $message.success('操作成功');
  } catch {
    $message.error('操作失败');
  }
};
```

---

✅ **记住**：

* **先用现有组件 → 再考虑 AntD → 最后才自定义**
* **所有样式必须用 Tailwind**
* **统一用 $message & ProForm**
* **管理后台无需任何文档说明**
